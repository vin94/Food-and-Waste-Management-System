/*
 * To change this template, choose Tools | Templates
 * and open the template in the editor.
 */
package UserInterface.Events.EventsAdmin;

import Business.EcoSystem;
import Business.Employee.Employee;
import Business.Enterprise.Enterprise;
import Business.Organization.Organization;
import Business.Role.Role;
import Business.UserAccount.UserAccount;
import Business.Util.Validation.Validation;
import java.awt.CardLayout;
import java.awt.Color;
import javax.swing.JOptionPane;
import javax.swing.JPanel;
import javax.swing.table.DefaultTableModel;

/**
 *
 * @author alves
 */
public class EventsManageUserAccountJPanel extends javax.swing.JPanel {

    
    /**
     * Creates new form EventsManageUserAccountJPanel
     */
    
    
    private Enterprise enterprise;
    private EcoSystem business;
    private JPanel container;
    
   

    public EventsManageUserAccountJPanel ( JPanel  container ,  Enterprise  enterprise ,  EcoSystem  business )  {
        
        initComponents();
        
        this.container = container;
        this.business = business;
        this.enterprise = enterprise;
        
        populateOrganizationComboBox();
        populateData();
    }
    
     public void populateEmployeeComboBox(Organization  organization)  {
        
          employeeComboBox.removeAllItems();

        for ( Employee  employee  :  organization.getEmployeeDirectory().getEmployeeList())   {
            
            if  (organization.getUserAccountDirectory().searchUser(employee)==null)  {
                
                 employeeComboBox.addItem(employee);
            }
        }
    }

    public void populateOrganizationComboBox() {
        
        organiztionComboBox.removeAllItems();

        for  (Organization organization :  enterprise.getOrganizationDirectory().getOrganizationList())  {
            
            organiztionComboBox.addItem(organization);
        }
    }
    
    
    public void populateData()   {

        DefaultTableModel  dtm=(DefaultTableModel) userTable.getModel();
        
        dtm.setRowCount(0);

        for ( Organization  organization:enterprise.getOrganizationDirectory().getOrganizationList())  {
            
            for ( UserAccount  ua:organization.getUserAccountDirectory().getUserAccountList())  {
                
                Object row[]=new Object[2];
                row[0]=ua;
                row[1]=ua.getRole();
                dtm.addRow(row);
            }
        }
    }
    
    private void populateRoleComboBox( Organization organization )  {
        
         roleComboBox.removeAllItems();
         
        for ( Role  role:organization.getSupportedRole())  {
            
            roleComboBox.addItem(role);
        }
    }

    

    /**
     * This method is called from within the constructor to initialize the form.
     * WARNING: Do NOT modify this code. The content of this method is always
     * regenerated by the Form Editor.
     */
    @SuppressWarnings("unchecked")
    // <editor-fold defaultstate="collapsed" desc="Generated Code">//GEN-BEGIN:initComponents
    private void initComponents() {

        headerLabel = new javax.swing.JLabel();
        jScrollPane = new javax.swing.JScrollPane();
        userTable = new javax.swing.JTable();
        jSeparator = new javax.swing.JSeparator();
        organizationLabel = new javax.swing.JLabel();
        organiztionComboBox = new javax.swing.JComboBox();
        employeeLabel = new javax.swing.JLabel();
        employeeComboBox = new javax.swing.JComboBox();
        roleLabel = new javax.swing.JLabel();
        roleComboBox = new javax.swing.JComboBox();
        userNameLabel = new javax.swing.JLabel();
        userNameTextField = new javax.swing.JTextField();
        passwordLabel = new javax.swing.JLabel();
        passwordTextField = new javax.swing.JPasswordField();
        backButton = new javax.swing.JButton();
        createButton = new javax.swing.JButton();

        setBackground(new java.awt.Color(204, 255, 255));

        headerLabel.setFont(new java.awt.Font("Tahoma", 1, 24)); // NOI18N
        headerLabel.setText("Events Adminstrative Work Area - Manage Users");

        userTable.setModel(new javax.swing.table.DefaultTableModel(
            new Object [][] {

            },
            new String [] {
                "User Name", "Role"
            }
        ) {
            Class[] types = new Class [] {
                java.lang.String.class, java.lang.String.class
            };
            boolean[] canEdit = new boolean [] {
                false, false
            };

            public Class getColumnClass(int columnIndex) {
                return types [columnIndex];
            }

            public boolean isCellEditable(int rowIndex, int columnIndex) {
                return canEdit [columnIndex];
            }
        });
        jScrollPane.setViewportView(userTable);
        if (userTable.getColumnModel().getColumnCount() > 0) {
            userTable.getColumnModel().getColumn(0).setResizable(false);
            userTable.getColumnModel().getColumn(1).setResizable(false);
        }

        organizationLabel.setText("Organization");

        organiztionComboBox.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                organiztionComboBoxActionPerformed(evt);
            }
        });

        employeeLabel.setText("Employee");

        roleLabel.setText("Role");

        userNameLabel.setText("User Name");

        userNameTextField.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                userNameTextFieldActionPerformed(evt);
            }
        });

        passwordLabel.setText("Password");

        backButton.setText("<< Back");
        backButton.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                backButtonActionPerformed(evt);
            }
        });

        createButton.setText("Create");
        createButton.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                createButtonActionPerformed(evt);
            }
        });

        javax.swing.GroupLayout layout = new javax.swing.GroupLayout(this);
        this.setLayout(layout);
        layout.setHorizontalGroup(
            layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addComponent(jSeparator)
            .addGroup(layout.createSequentialGroup()
                .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                    .addGroup(layout.createSequentialGroup()
                        .addGap(161, 161, 161)
                        .addComponent(backButton)
                        .addGap(226, 226, 226)
                        .addComponent(createButton))
                    .addGroup(layout.createSequentialGroup()
                        .addGap(149, 149, 149)
                        .addComponent(jScrollPane, javax.swing.GroupLayout.PREFERRED_SIZE, 375, javax.swing.GroupLayout.PREFERRED_SIZE))
                    .addGroup(layout.createSequentialGroup()
                        .addGap(195, 195, 195)
                        .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.TRAILING)
                            .addGroup(layout.createSequentialGroup()
                                .addComponent(organizationLabel)
                                .addGap(18, 18, 18)
                                .addComponent(organiztionComboBox, javax.swing.GroupLayout.PREFERRED_SIZE, 200, javax.swing.GroupLayout.PREFERRED_SIZE))
                            .addGroup(layout.createSequentialGroup()
                                .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.TRAILING, false)
                                    .addComponent(roleLabel, javax.swing.GroupLayout.Alignment.LEADING, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE)
                                    .addComponent(employeeLabel, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE)
                                    .addComponent(passwordLabel, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE)
                                    .addComponent(userNameLabel, javax.swing.GroupLayout.DEFAULT_SIZE, 72, Short.MAX_VALUE))
                                .addGap(18, 18, 18)
                                .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING, false)
                                    .addComponent(roleComboBox, 0, javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE)
                                    .addComponent(userNameTextField)
                                    .addComponent(passwordTextField)
                                    .addComponent(employeeComboBox, javax.swing.GroupLayout.PREFERRED_SIZE, 200, javax.swing.GroupLayout.PREFERRED_SIZE)))))
                    .addGroup(layout.createSequentialGroup()
                        .addGap(33, 33, 33)
                        .addComponent(headerLabel)))
                .addGap(76, 76, 76))
        );
        layout.setVerticalGroup(
            layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGroup(layout.createSequentialGroup()
                .addGap(40, 40, 40)
                .addComponent(headerLabel, javax.swing.GroupLayout.PREFERRED_SIZE, 29, javax.swing.GroupLayout.PREFERRED_SIZE)
                .addGap(49, 49, 49)
                .addComponent(jScrollPane, javax.swing.GroupLayout.PREFERRED_SIZE, 179, javax.swing.GroupLayout.PREFERRED_SIZE)
                .addGap(24, 24, 24)
                .addComponent(jSeparator, javax.swing.GroupLayout.PREFERRED_SIZE, 10, javax.swing.GroupLayout.PREFERRED_SIZE)
                .addGap(22, 22, 22)
                .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.BASELINE)
                    .addComponent(organiztionComboBox, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE)
                    .addComponent(organizationLabel))
                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.BASELINE)
                    .addComponent(employeeLabel)
                    .addComponent(employeeComboBox, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE))
                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.UNRELATED)
                .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.BASELINE)
                    .addComponent(roleLabel)
                    .addComponent(roleComboBox, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE))
                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.UNRELATED)
                .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.BASELINE)
                    .addComponent(userNameLabel)
                    .addComponent(userNameTextField, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE))
                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.UNRELATED)
                .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.BASELINE)
                    .addComponent(passwordLabel)
                    .addComponent(passwordTextField, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE))
                .addGap(18, 18, 18)
                .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.BASELINE)
                    .addComponent(createButton)
                    .addComponent(backButton))
                .addGap(43, 43, 43))
        );
    }// </editor-fold>//GEN-END:initComponents

    private void createButtonActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_createButtonActionPerformed

        String userName=null;
        
        if(Validation.validateStringInput(userNameTextField))  {
            
            userName=userNameTextField.getText();
            
        }
        else 
        {
           return;
        }

        char[] passChar=passwordTextField.getPassword();
        
        if(passChar==null || passChar.length==0)  {
            
            JOptionPane.showMessageDialog (null,"Password cannot be blank" , "Warning" ,JOptionPane.WARNING_MESSAGE);
            passwordTextField.setBackground(Color.GREEN);
            
            return;
        }
        else
        {
             passwordTextField.setBackground(Color.YELLOW);
        }

        UserAccount  ua=new UserAccount();
        String password=ua.encodePassword(String.valueOf(passChar));
        

        Organization organization=(Organization) organiztionComboBox.getSelectedItem();
        

        if(business.checkIfUserNameIsUnique(userName))   {
            
            JOptionPane.showMessageDialog( null, "User name already exists.Please select a different one.");
            return;
        }

        Employee employee=(Employee) employeeComboBox.getSelectedItem();
        Role role=(Role) roleComboBox.getSelectedItem();

        if(organization==null  ||  employee==null  ||  role==null)   {
            
            JOptionPane.showMessageDialog(null, "Invalid input!");
            return;
        }

        organization.getUserAccountDirectory().addUserAccount(userName,password,employee,role);
        JOptionPane.showMessageDialog(null, "User account created successfully","Information",JOptionPane.INFORMATION_MESSAGE);
        

        userNameTextField.setText("");
        
        passwordTextField.setText("");
        
        populateEmployeeComboBox(organization);
        
        populateData();
    }//GEN-LAST:event_createButtonActionPerformed

    private void backButtonActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_backButtonActionPerformed
        // TODO add your handling code here:
        
        container.remove(this);
        CardLayout layout = (CardLayout) container.getLayout();
        layout.previous(container);
        
    }//GEN-LAST:event_backButtonActionPerformed

    private void organiztionComboBoxActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_organiztionComboBoxActionPerformed
        
        Organization  organization=(Organization) organiztionComboBox.getSelectedItem();
        
        if (organization  != null)  {
            
            populateEmployeeComboBox(organization);
            populateRoleComboBox(organization);
        }
    }//GEN-LAST:event_organiztionComboBoxActionPerformed

    private void userNameTextFieldActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_userNameTextFieldActionPerformed
        // TODO add your handling code here:
    }//GEN-LAST:event_userNameTextFieldActionPerformed

    // Variables declaration - do not modify//GEN-BEGIN:variables
    private javax.swing.JButton backButton;
    private javax.swing.JButton createButton;
    private javax.swing.JComboBox employeeComboBox;
    private javax.swing.JLabel employeeLabel;
    private javax.swing.JLabel headerLabel;
    private javax.swing.JScrollPane jScrollPane;
    private javax.swing.JSeparator jSeparator;
    private javax.swing.JLabel organizationLabel;
    private javax.swing.JComboBox organiztionComboBox;
    private javax.swing.JLabel passwordLabel;
    private javax.swing.JPasswordField passwordTextField;
    private javax.swing.JComboBox roleComboBox;
    private javax.swing.JLabel roleLabel;
    private javax.swing.JLabel userNameLabel;
    private javax.swing.JTextField userNameTextField;
    private javax.swing.JTable userTable;
    // End of variables declaration//GEN-END:variables
}
