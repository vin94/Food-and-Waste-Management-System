/*
 * To change this license header, choose License Headers in Project Properties.
 * To change this template file, choose Tools | Templates
 * and open the template in the editor.
 */
package UserInterface.Transportation.TransportationManager;

import Business.Enterprise.Enterprise;
import Business.Enterprise.NGOEnterprise;
import Business.Network.Network;
import Business.Organization.Organization;
import Business.Organization.NGO.NGOManagerOrganization;
import Business.UserAccount.UserAccount;
import Business.Util.Request.RequestStatus;
import static Business.Util.Request.RequestStatus.pickupRequestStatusList;
import Business.WorkQueue.CollectionWorkRequest;
import Business.WorkQueue.PaymentWorkRequest;
import Business.WorkQueue.WorkRequest;
import java.awt.CardLayout;
import javax.swing.JOptionPane;
import javax.swing.JPanel;
import javax.swing.table.DefaultTableModel;

/**
 *
 * @author thiag
 */

public class TransportationManagerGenerateInvoicesJPanel extends javax.swing.JPanel   {

    /**
     * Creates new form TransportationManagerGenerateInvoices
     */
    
    private JPanel userProcessContainer;
    private UserAccount account;
    private Network network;
    

    public TransportationManagerGenerateInvoicesJPanel ( JPanel userProcessContainer , UserAccount account, Network network)   {
        
        initComponents();
        
        this.userProcessContainer  =  userProcessContainer;
        this.network  =  network;
        this.account  =  account;
        
        populateComboBox();
        
    }

    /**
     * This method is called from within the constructor to initialize the form.
     * WARNING: Do NOT modify this code. The content of this method is always
     * regenerated by the Form Editor.
     */
    @SuppressWarnings("unchecked")
    // <editor-fold defaultstate="collapsed" desc="Generated Code">//GEN-BEGIN:initComponents
    private void initComponents() {

        headerLabel = new javax.swing.JLabel();
        jScrollPane = new javax.swing.JScrollPane();
        detailsTable = new javax.swing.JTable();
        backButton = new javax.swing.JButton();
        ngoNameLabel = new javax.swing.JLabel();
        ngoComboBox = new javax.swing.JComboBox();
        generateAllInvoicesButton = new javax.swing.JButton();
        generateInoviceButton = new javax.swing.JButton();

        setBackground(new java.awt.Color(255, 255, 204));
        setLayout(new org.netbeans.lib.awtextra.AbsoluteLayout());

        headerLabel.setFont(new java.awt.Font("Tahoma", 1, 24)); // NOI18N
        headerLabel.setText("Transportation Manager Work Area - Generate Invoices");
        add(headerLabel, new org.netbeans.lib.awtextra.AbsoluteConstraints(31, 36, -1, -1));

        detailsTable.setModel(new javax.swing.table.DefaultTableModel(
            new Object [][] {

            },
            new String [] {
                "Job Completion Date", "Request Status", "Cost", "Invoice Generated", "Paid"
            }
        ) {
            boolean[] canEdit = new boolean [] {
                false, false, false, false, false
            };

            public boolean isCellEditable(int rowIndex, int columnIndex) {
                return canEdit [columnIndex];
            }
        });
        jScrollPane.setViewportView(detailsTable);
        if (detailsTable.getColumnModel().getColumnCount() > 0) {
            detailsTable.getColumnModel().getColumn(0).setResizable(false);
            detailsTable.getColumnModel().getColumn(1).setResizable(false);
            detailsTable.getColumnModel().getColumn(2).setResizable(false);
            detailsTable.getColumnModel().getColumn(3).setResizable(false);
            detailsTable.getColumnModel().getColumn(4).setResizable(false);
        }

        add(jScrollPane, new org.netbeans.lib.awtextra.AbsoluteConstraints(39, 182, 559, 160));

        backButton.setText("<< Back");
        backButton.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                backButtonActionPerformed(evt);
            }
        });
        add(backButton, new org.netbeans.lib.awtextra.AbsoluteConstraints(39, 401, -1, -1));

        ngoNameLabel.setFont(new java.awt.Font("Tahoma", 1, 11)); // NOI18N
        ngoNameLabel.setText("NGO Name:");
        add(ngoNameLabel, new org.netbeans.lib.awtextra.AbsoluteConstraints(39, 122, 75, -1));

        ngoComboBox.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                ngoComboBoxActionPerformed(evt);
            }
        });
        add(ngoComboBox, new org.netbeans.lib.awtextra.AbsoluteConstraints(126, 117, 155, -1));

        generateAllInvoicesButton.setText("Generate All Invoices");
        generateAllInvoicesButton.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                generateAllInvoicesButtonActionPerformed(evt);
            }
        });
        add(generateAllInvoicesButton, new org.netbeans.lib.awtextra.AbsoluteConstraints(323, 401, -1, -1));

        generateInoviceButton.setText("Generate Invoice");
        generateInoviceButton.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                generateInoviceButtonActionPerformed(evt);
            }
        });
        add(generateInoviceButton, new org.netbeans.lib.awtextra.AbsoluteConstraints(504, 401, 120, -1));
    }// </editor-fold>//GEN-END:initComponents
    
    public void populateComboBox()   {
        
        ngoComboBox.removeAllItems();
        
        for(Enterprise e  :  network.getEnterpriseDirectory().getEnterpriseList())   
        {
            if(e.getEnterpriseType().equals(Enterprise.EnterpriseType.NGO))   {
                
                ngoComboBox.addItem(e);
            }
        }
    }


    private void backButtonActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_backButtonActionPerformed
        // TODO add your handling code here:
        
        userProcessContainer.remove(this);
        CardLayout layout  =  (CardLayout) userProcessContainer.getLayout();
        layout.previous(userProcessContainer);
        
    }//GEN-LAST:event_backButtonActionPerformed

    private void ngoComboBoxActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_ngoComboBoxActionPerformed
        // TODO add your handling code here:
        
        NGOEnterprise ngo  =  (NGOEnterprise) ngoComboBox.getSelectedItem();
        
        if(ngo  !=  null) 
        {
            populateTable(ngo);
        }
    }//GEN-LAST:event_ngoComboBoxActionPerformed

    private void generateInoviceButtonActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_generateInoviceButtonActionPerformed
        // TODO add your handling code here:
        
        int selectedRow  =  detailsTable.getSelectedRow();
        
        if(selectedRow < 0)   {
            
            JOptionPane.showMessageDialog(null,"Please select a request to generate invoice for","Warning",JOptionPane.WARNING_MESSAGE);
            return;
        } 
        else 
        {
            CollectionWorkRequest cwr  =  (CollectionWorkRequest) detailsTable.getValueAt(selectedRow, 1);
            String status  =  cwr.getStatus();
            if(status.equals(pickupRequestStatusList.get(5))  ||  status.equals(pickupRequestStatusList.get(6)))   
            {
                if(cwr.getPaid())   {
                    
                    
                    JOptionPane.showMessageDialog(null , "Selected Invoice has already been paid for" , "Information" ,JOptionPane.INFORMATION_MESSAGE);
                    
                    return;
                }

                if (cwr.getInvoiceGenerated())   {
                    
                    JOptionPane.showMessageDialog(null , "Selected Invoice has already been generated" , "Information" , JOptionPane.INFORMATION_MESSAGE);
                    
                    return;
                }

                NGOEnterprise ngo = (NGOEnterprise)ngoComboBox.getSelectedItem();

                PaymentWorkRequest pwr  =  new PaymentWorkRequest();
                
                cwr.setInvoiceGenerated(true);
                
                pwr.setCollectionWorkRequest(cwr);
                
                pwr.setStatus(RequestStatus.getInvoiceStatusMessage(1));
                
                pwr.setSender(account);

                for(Enterprise e  :  network.getEnterpriseDirectory().getEnterpriseList())   
                {
                    
                    if(e.getName().equals(ngo.getName()))   
                    {
                        for(Organization o  :  e.getOrganizationDirectory().getOrganizationList())   
                        {
                            if(o instanceof NGOManagerOrganization)   
                            {
                                o.getWorkQueue().getWorkRequestList().add(pwr);
                                break;
                            }
                        }
                    }
                }

                // Add to own work queue
                account.getWorkQueue().getWorkRequestList().add(pwr);
                
                JOptionPane.showMessageDialog ( null,"Invoice request raised with NGO for further processing" , "Information", JOptionPane.INFORMATION_MESSAGE);
                
                populateTable(ngo);
                
            }
            else 
            {
                
                JOptionPane.showMessageDialog ( null,"Request not delivered yet to generate an Invoice for","Warning",JOptionPane.WARNING_MESSAGE);
            }
        }
    }//GEN-LAST:event_generateInoviceButtonActionPerformed

    private void generateAllInvoicesButtonActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_generateAllInvoicesButtonActionPerformed

        NGOEnterprise ngo  =  (NGOEnterprise) ngoComboBox.getSelectedItem();
        boolean generated  =  false;

        for(int i = 0; i < detailsTable.getRowCount(); i++)   
        {
            WorkRequest wr  =  (WorkRequest) detailsTable.getValueAt(i, 1);
            
            if(wr instanceof CollectionWorkRequest)   {
                
                CollectionWorkRequest cwr  =  (CollectionWorkRequest) wr;
                
                if(!cwr.getPaid()  &&  !cwr.getInvoiceGenerated())   {
                    
                    generated  =  true;

                    PaymentWorkRequest pwr  =  new PaymentWorkRequest();
                    
                    cwr.setInvoiceGenerated(true);
                    
                    pwr.setCollectionWorkRequest(cwr);
                    
                    pwr.setStatus(RequestStatus.getInvoiceStatusMessage(1));
                    
                    pwr.setSender(account);

                    for(Enterprise e  :  network.getEnterpriseDirectory().getEnterpriseList())   
                    {
                        if(e.getName().equals(ngo.getName()))   {
                            
                            for(Organization o  :  e.getOrganizationDirectory().getOrganizationList())   
                            {
                                if(o instanceof NGOManagerOrganization)   
                                {
                                    o.getWorkQueue().getWorkRequestList().add(pwr);
                                    break;
                                }
                            }
                        }
                    }

                    // Add to own work queue
                    account.getWorkQueue().getWorkRequestList().add(pwr);

                }
            }
        }
        if(!generated)   
        {
            JOptionPane.showMessageDialog(null, "All invoices already generated", "Information", JOptionPane.INFORMATION_MESSAGE);
            return;
        }
        JOptionPane.showMessageDialog(null, "All ungenerated invoices are now generated", "Information", JOptionPane.INFORMATION_MESSAGE);
        
        populateTable(ngo);
        
    }//GEN-LAST:event_generateAllInvoicesButtonActionPerformed

    public void populateTable (NGOEnterprise ngo)   {
        

        DefaultTableModel dtm  =  (DefaultTableModel) detailsTable.getModel();
        dtm.setRowCount(0);
        
        for(WorkRequest wr  :  account.getWorkQueue().getWorkRequestList())   
        {
            if(wr instanceof CollectionWorkRequest)   
            {
                CollectionWorkRequest cwr  =  (CollectionWorkRequest) wr;
                
                if((cwr.getStatus().equals(pickupRequestStatusList.get(5)))  ||  (cwr.getStatus().equals(pickupRequestStatusList.get(6)))) 
                {
                    if(cwr.getDeliverToNGO()  !=  null)   {
                        
                        if(cwr.getDeliverToNGO().equals(ngo.getName()))   {
                            
                            Object row[]  =  new Object[5];
                            row[0]  =  cwr.getResolveDate();
                            row[1]  =  cwr;
                            row[2]  =  "$" + cwr.getDeliveryCost();
                            row[3]  =  cwr.getInvoiceGenerated() ? "Yes" : "No";
                            row[4]  =  cwr.getPaid() ? "Yes" : "No";

                            dtm.addRow(row);
                        }
                    }
                }
            }
        }
    }
    // Variables declaration - do not modify//GEN-BEGIN:variables
    private javax.swing.JButton backButton;
    private javax.swing.JTable detailsTable;
    private javax.swing.JButton generateAllInvoicesButton;
    private javax.swing.JButton generateInoviceButton;
    private javax.swing.JLabel headerLabel;
    private javax.swing.JScrollPane jScrollPane;
    private javax.swing.JComboBox ngoComboBox;
    private javax.swing.JLabel ngoNameLabel;
    // End of variables declaration//GEN-END:variables
}
