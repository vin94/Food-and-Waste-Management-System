/*
 * To change this license header, choose License Headers in Project Properties.
 * To change this template file, choose Tools | Templates
 * and open the template in the editor.
 */
package userInterface.ngo.ngoManager;

import Business.Enterprise.Enterprise;
import Business.Network.Network;
import Business.Organization.Organization;
import Business.Organization.Transportation.TransportationManagerOrganization;
import Business.UserAccount.UserAccount;
import Business.Util.Request.RequestItem;
import Business.Util.Request.RequestStatus;
import Business.WorkQueue.CollectionWorkRequest;
import Business.WorkQueue.ShortageWorkRequest;
import Business.WorkQueue.WorkRequest;
import java.awt.CardLayout;
import javax.swing.JOptionPane;
import javax.swing.JPanel;
import javax.swing.table.DefaultTableModel;

/**
 *
 * @author siri chowdhary
 */
public class NGOOtherRegionsRequestJPanel extends javax.swing.JPanel {

    private JPanel userProcessContainer;
    private UserAccount account;
    private Organization organization;
    private Network network;
    private CollectionWorkRequest collectionWorkRequest;
    private String message;

    /**
     * Creates new form NGOOtherRegionsRequestJPanel
     */
    
    public NGOOtherRegionsRequestJPanel ( JPanel userProcessContainer , CollectionWorkRequest collectionWorkRequest , Organization organization , UserAccount account , Network network , String message) {
        
        initComponents();
        
        this.userProcessContainer  =  userProcessContainer;
        this.collectionWorkRequest  =  collectionWorkRequest;
        this.account  =  account;
        this.organization  =  organization;
        this.network  =  network;
        this.message  =  message;

        populateShortageTable();
        populateRequestDetails();
        
    }

    /**
     * This method is called from within the constructor to initialize the form.
     * WARNING: Do NOT modify this code. The content of this method is always
     * regenerated by the Form Editor.
     */
    @SuppressWarnings("unchecked")
    // <editor-fold defaultstate="collapsed" desc="Generated Code">//GEN-BEGIN:initComponents
    private void initComponents() {

        headerLabel = new javax.swing.JLabel();
        jScrollPane = new javax.swing.JScrollPane();
        shortageTable = new javax.swing.JTable();
        backButton = new javax.swing.JButton();
        jSeparator = new javax.swing.JSeparator();
        assignButton = new javax.swing.JButton();
        quantityLabel = new javax.swing.JLabel();
        requestStatusValueLabel = new javax.swing.JLabel();
        requestStatusLabel = new javax.swing.JLabel();
        requestDateValueLabel = new javax.swing.JLabel();
        requestDateLabel = new javax.swing.JLabel();
        requestFromValueLabel = new javax.swing.JLabel();
        requestFromLabel = new javax.swing.JLabel();
        jScrollPaneRequestDetails = new javax.swing.JScrollPane();
        requestDetailsTable = new javax.swing.JTable();
        quantityValueLabel = new javax.swing.JLabel();

        setBackground(new java.awt.Color(204, 255, 204));

        headerLabel.setFont(new java.awt.Font("Tahoma", 1, 24)); // NOI18N
        headerLabel.setText("NGO Manager - Redirect Request");

        shortageTable.setModel(new javax.swing.table.DefaultTableModel(
            new Object [][] {

            },
            new String [] {
                "Request Date", "NGO Name", "Raised By(Manager Name)", "Assign to Employee", "Status"
            }
        ) {
            boolean[] canEdit = new boolean [] {
                false, false, false, false, false
            };

            public boolean isCellEditable(int rowIndex, int columnIndex) {
                return canEdit [columnIndex];
            }
        });
        jScrollPane.setViewportView(shortageTable);
        if (shortageTable.getColumnModel().getColumnCount() > 0) {
            shortageTable.getColumnModel().getColumn(0).setResizable(false);
            shortageTable.getColumnModel().getColumn(1).setResizable(false);
            shortageTable.getColumnModel().getColumn(2).setResizable(false);
            shortageTable.getColumnModel().getColumn(3).setResizable(false);
            shortageTable.getColumnModel().getColumn(4).setResizable(false);
        }

        backButton.setText("<< Back");
        backButton.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                backButtonActionPerformed(evt);
            }
        });

        assignButton.setText("Assign");
        assignButton.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                assignButtonActionPerformed(evt);
            }
        });

        quantityLabel.setFont(new java.awt.Font("Tahoma", 1, 11)); // NOI18N
        quantityLabel.setText("Food Quantity:");

        requestStatusValueLabel.setText("request_status");

        requestStatusLabel.setFont(new java.awt.Font("Tahoma", 1, 11)); // NOI18N
        requestStatusLabel.setText("Request status:");

        requestDateValueLabel.setText("request_date");

        requestDateLabel.setFont(new java.awt.Font("Tahoma", 1, 11)); // NOI18N
        requestDateLabel.setText("Request Date:");

        requestFromValueLabel.setText("request_from");

        requestFromLabel.setFont(new java.awt.Font("Tahoma", 1, 11)); // NOI18N
        requestFromLabel.setText("Request from:");

        requestDetailsTable.setModel(new javax.swing.table.DefaultTableModel(
            new Object [][] {

            },
            new String [] {
                "Quantity", "Type"
            }
        ) {
            boolean[] canEdit = new boolean [] {
                false, false
            };

            public boolean isCellEditable(int rowIndex, int columnIndex) {
                return canEdit [columnIndex];
            }
        });
        jScrollPaneRequestDetails.setViewportView(requestDetailsTable);

        quantityValueLabel.setText("quantity");

        javax.swing.GroupLayout layout = new javax.swing.GroupLayout(this);
        this.setLayout(layout);
        layout.setHorizontalGroup(
            layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGroup(layout.createSequentialGroup()
                .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING, false)
                    .addComponent(jSeparator)
                    .addGroup(layout.createSequentialGroup()
                        .addGap(104, 104, 104)
                        .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                            .addComponent(requestFromLabel)
                            .addGroup(layout.createSequentialGroup()
                                .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                                    .addGroup(javax.swing.GroupLayout.Alignment.TRAILING, layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                                        .addGroup(javax.swing.GroupLayout.Alignment.TRAILING, layout.createSequentialGroup()
                                            .addComponent(requestStatusLabel)
                                            .addGap(26, 26, 26))
                                        .addGroup(layout.createSequentialGroup()
                                            .addComponent(requestDateLabel)
                                            .addGap(35, 35, 35)))
                                    .addGroup(javax.swing.GroupLayout.Alignment.TRAILING, layout.createSequentialGroup()
                                        .addComponent(quantityLabel)
                                        .addGap(33, 33, 33)))
                                .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                                    .addComponent(quantityValueLabel)
                                    .addComponent(requestDateValueLabel)
                                    .addComponent(requestStatusValueLabel)
                                    .addComponent(requestFromValueLabel)))
                            .addGroup(layout.createSequentialGroup()
                                .addComponent(backButton)
                                .addGap(422, 422, 422)
                                .addComponent(assignButton)))
                        .addGap(92, 92, 92)))
                .addGap(0, 0, Short.MAX_VALUE))
            .addGroup(layout.createSequentialGroup()
                .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                    .addGroup(layout.createSequentialGroup()
                        .addGap(160, 160, 160)
                        .addComponent(jScrollPaneRequestDetails, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE))
                    .addGroup(layout.createSequentialGroup()
                        .addGap(107, 107, 107)
                        .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                            .addComponent(jScrollPane, javax.swing.GroupLayout.PREFERRED_SIZE, 560, javax.swing.GroupLayout.PREFERRED_SIZE)
                            .addComponent(headerLabel, javax.swing.GroupLayout.PREFERRED_SIZE, 463, javax.swing.GroupLayout.PREFERRED_SIZE))))
                .addContainerGap(javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE))
        );
        layout.setVerticalGroup(
            layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGroup(layout.createSequentialGroup()
                .addContainerGap()
                .addComponent(headerLabel)
                .addGap(11, 11, 11)
                .addComponent(jScrollPane, javax.swing.GroupLayout.PREFERRED_SIZE, 189, javax.swing.GroupLayout.PREFERRED_SIZE)
                .addGap(23, 23, 23)
                .addComponent(jSeparator, javax.swing.GroupLayout.PREFERRED_SIZE, 10, javax.swing.GroupLayout.PREFERRED_SIZE)
                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.BASELINE)
                    .addComponent(requestFromLabel)
                    .addComponent(requestFromValueLabel))
                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.BASELINE)
                    .addComponent(requestDateLabel)
                    .addComponent(requestDateValueLabel))
                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.BASELINE)
                    .addComponent(requestStatusLabel)
                    .addComponent(requestStatusValueLabel))
                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.BASELINE)
                    .addComponent(quantityLabel)
                    .addComponent(quantityValueLabel))
                .addGap(28, 28, 28)
                .addComponent(jScrollPaneRequestDetails, javax.swing.GroupLayout.PREFERRED_SIZE, 160, javax.swing.GroupLayout.PREFERRED_SIZE)
                .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                    .addGroup(layout.createSequentialGroup()
                        .addGap(25, 25, 25)
                        .addComponent(assignButton))
                    .addGroup(layout.createSequentialGroup()
                        .addGap(18, 18, 18)
                        .addComponent(backButton)))
                .addContainerGap())
        );
    }// </editor-fold>//GEN-END:initComponents

    private void backButtonActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_backButtonActionPerformed
        
        userProcessContainer.remove(this);
        CardLayout layout  =  (CardLayout) userProcessContainer.getLayout();

        int componentLength  =  userProcessContainer.getComponentCount();
        NGOEventsRequestJPanel panel  =  (NGOEventsRequestJPanel) userProcessContainer.getComponent(componentLength - 1);
        panel.populateTable();

        layout.previous(userProcessContainer);


    }//GEN-LAST:event_backButtonActionPerformed

    private void assignButtonActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_assignButtonActionPerformed

        int selectedRow  =  shortageTable.getSelectedRow();
        
        if(selectedRow < 0)   
        {
            JOptionPane.showMessageDialog(null,"Please select a shortage request","Information",JOptionPane.INFORMATION_MESSAGE);
            return;
        }
        
        ShortageWorkRequest swr  =  (ShortageWorkRequest)shortageTable.getValueAt(selectedRow, 4);

        collectionWorkRequest.setDeliverTo(swr.getAssignToEmployee());
        
        collectionWorkRequest.setDeliverToNGO(swr.getNgoName());
        
        collectionWorkRequest.setMessage(message);
        
        collectionWorkRequest.setStatus(RequestStatus.getPickupStatusMessage(2));
        
        swr.setLinkedCollectionWorkRequest(collectionWorkRequest);
        
        swr.setStatus(RequestStatus.getShortageStatusMessage(2));

        // Adding to own queue
        account.getWorkQueue().getWorkRequestList().add(collectionWorkRequest);

        // Adding to Transportation Manager Organization queue
        
        for( Enterprise e  :  network.getEnterpriseDirectory().getEnterpriseList())  
        {
            for( Organization o  :  e.getOrganizationDirectory().getOrganizationList())   
            {
                if( o instanceof TransportationManagerOrganization)   
                {
                    o.getWorkQueue().getWorkRequestList().add(collectionWorkRequest);
                    break;
                }
            }
        }
        JOptionPane.showMessageDialog ( null ,"Request sucessfully redirected to another NGO" , "Information", JOptionPane.INFORMATION_MESSAGE);
        assignButton.setEnabled(false);
        
    }//GEN-LAST:event_assignButtonActionPerformed

    
    
     private void populateTable()   
    {
        DefaultTableModel dtm  =  (DefaultTableModel)requestDetailsTable.getModel();
        dtm.setRowCount(0);

        for( RequestItem ri  :  collectionWorkRequest.getRequestItems())   
        {
            if( ri.getQuantity() > 0)   
            {
                Object row[]  =  new Object[2];
                row[0]  =  ri;
                row[1]  =  ri.getQuantity();
                

                dtm.addRow(row);
            }
        }
    }
     
    private void populateShortageTable()  
    {
        DefaultTableModel dtm  =  (DefaultTableModel) shortageTable.getModel();
        dtm.setRowCount(0);

        for( WorkRequest wr  :  organization.getWorkQueue().getWorkRequestList())   
        {
            if( wr.getStatus().equals(RequestStatus.getShortageStatusMessage(1)))   
            {
                if( wr instanceof ShortageWorkRequest)   
                {
                    ShortageWorkRequest swr  =  (ShortageWorkRequest) wr;
                    

                    Object row[]  =  new Object[5];
                    row[0]  =  swr.getRequestDate();
                    row[1]  =  swr.getSender().getEmployee().getName();
                    row[2]  =  swr.getNgoName();
                    row[3]  =  swr.getAssignToEmployee();
                    row[4]  =  swr;

                    dtm.addRow(row);
                }
            }
        }
    }

    public void populateRequestDetails()   
    {
        String status  =  collectionWorkRequest.getStatus();

        requestStatusValueLabel.setText(status);
        
        requestFromValueLabel.setText(collectionWorkRequest.getRaisedByEvents());
        
        requestDateValueLabel.setText(collectionWorkRequest.getRequestDate() + "");
        
        quantityValueLabel.setText(collectionWorkRequest.getTotalQuantity() +"pounds");

        
        populateTable();
    }

   

    // Variables declaration - do not modify//GEN-BEGIN:variables
    private javax.swing.JButton assignButton;
    private javax.swing.JButton backButton;
    private javax.swing.JLabel headerLabel;
    private javax.swing.JScrollPane jScrollPane;
    private javax.swing.JScrollPane jScrollPaneRequestDetails;
    private javax.swing.JSeparator jSeparator;
    private javax.swing.JLabel quantityLabel;
    private javax.swing.JLabel quantityValueLabel;
    private javax.swing.JLabel requestDateLabel;
    private javax.swing.JLabel requestDateValueLabel;
    private javax.swing.JTable requestDetailsTable;
    private javax.swing.JLabel requestFromLabel;
    private javax.swing.JLabel requestFromValueLabel;
    private javax.swing.JLabel requestStatusLabel;
    private javax.swing.JLabel requestStatusValueLabel;
    private javax.swing.JTable shortageTable;
    // End of variables declaration//GEN-END:variables
}
