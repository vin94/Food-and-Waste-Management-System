/*
 * To change this license header, choose License Headers in Project Properties.
 * To change this template file, choose Tools | Templates
 * and open the template in the editor.
 */
package userInterface.ngo.ngoWorker;

import Business.Enterprise.Enterprise;
import Business.Enterprise.NGOEnterprise;
import Business.Util.Leftovers.Leftovers;
import Business.Util.Inventory.DistributedItemsDirectory;
import Business.Util.Inventory.DistributedItems;
import Business.Util.Request.RequestItem;
import java.awt.CardLayout;
import javax.swing.JOptionPane;
import javax.swing.JPanel;
import javax.swing.table.DefaultTableModel;
import javax.swing.table.TableRowSorter;

/**
 *
 * @author siri chowdhary
 */
public class NGOWorkerDistributeFoodJPanel extends javax.swing.JPanel {

    /**
     * Creates new form NGOWorkerDistributeFoodJPanel
     */
    private JPanel userProcessContainer;
    private NGOEnterprise enterprise;
    private DistributedItemsDirectory distributed;
    private Boolean isDistributed = false;
    

    public NGOWorkerDistributeFoodJPanel ( JPanel userProcessContainer , Enterprise enterprise) {
        
        initComponents();
        
        this.userProcessContainer  =  userProcessContainer;
        this.enterprise  =  (NGOEnterprise) enterprise;
        
        populateInventoryTable();
        
        if( !isDistributed)   
        {
            distributed  =  new DistributedItemsDirectory();
        }
    }

    /**
     * This method is called from within the constructor to initialize the form.
     * WARNING: Do NOT modify this code. The content of this method is always
     * regenerated by the Form Editor.
     */
    @SuppressWarnings("unchecked")
    // <editor-fold defaultstate="collapsed" desc="Generated Code">//GEN-BEGIN:initComponents
    private void initComponents() {

        headerLabel = new javax.swing.JLabel();
        jScrollPane = new javax.swing.JScrollPane();
        inventoryTable = new javax.swing.JTable();
        quantityLabel = new javax.swing.JLabel();
        quantitySpinner = new javax.swing.JSpinner();
        addButton = new javax.swing.JButton();
        jSeparator = new javax.swing.JSeparator();
        jScrollPaneTblListItem = new javax.swing.JScrollPane();
        listItemTable = new javax.swing.JTable();
        removeButton = new javax.swing.JButton();
        peopleFedLabel = new javax.swing.JLabel();
        peopleFedSpinner = new javax.swing.JSpinner();
        wastageAvoidedLabel = new javax.swing.JLabel();
        wastageAvoidedValueLabel = new javax.swing.JLabel();
        backButton = new javax.swing.JButton();
        confirmButton = new javax.swing.JButton();

        setBackground(new java.awt.Color(204, 255, 204));

        headerLabel.setFont(new java.awt.Font("Tahoma", 1, 24)); // NOI18N
        headerLabel.setText("NGO Worker - Distriubute Food");

        inventoryTable.setModel(new javax.swing.table.DefaultTableModel(
            new Object [][] {

            },
            new String [] {
                "Food Type", "Quantity"
            }
        ) {
            boolean[] canEdit = new boolean [] {
                false, false
            };

            public boolean isCellEditable(int rowIndex, int columnIndex) {
                return canEdit [columnIndex];
            }
        });
        inventoryTable.getTableHeader().setReorderingAllowed(false);
        jScrollPane.setViewportView(inventoryTable);
        if (inventoryTable.getColumnModel().getColumnCount() > 0) {
            inventoryTable.getColumnModel().getColumn(0).setResizable(false);
            inventoryTable.getColumnModel().getColumn(1).setResizable(false);
        }

        quantityLabel.setHorizontalAlignment(javax.swing.SwingConstants.RIGHT);
        quantityLabel.setText("Quantity:");

        quantitySpinner.setModel(new javax.swing.SpinnerNumberModel(1, 1, null, 1));

        addButton.setText("Add");
        addButton.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                addButtonActionPerformed(evt);
            }
        });

        listItemTable.setModel(new javax.swing.table.DefaultTableModel(
            new Object [][] {

            },
            new String [] {
                "Food Type", "Quantity"
            }
        ) {
            boolean[] canEdit = new boolean [] {
                false, false
            };

            public boolean isCellEditable(int rowIndex, int columnIndex) {
                return canEdit [columnIndex];
            }
        });
        listItemTable.getTableHeader().setReorderingAllowed(false);
        jScrollPaneTblListItem.setViewportView(listItemTable);
        if (listItemTable.getColumnModel().getColumnCount() > 0) {
            listItemTable.getColumnModel().getColumn(0).setResizable(false);
            listItemTable.getColumnModel().getColumn(1).setResizable(false);
        }

        removeButton.setText("Remove");
        removeButton.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                removeButtonActionPerformed(evt);
            }
        });

        peopleFedLabel.setHorizontalAlignment(javax.swing.SwingConstants.RIGHT);
        peopleFedLabel.setText("People fed:");

        peopleFedSpinner.setModel(new javax.swing.SpinnerNumberModel(1, 1, null, 1));

        wastageAvoidedLabel.setText("Wastage Avoided:");

        backButton.setText("<<Back");
        backButton.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                backButtonActionPerformed(evt);
            }
        });

        confirmButton.setText("Confirm");
        confirmButton.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                confirmButtonActionPerformed(evt);
            }
        });

        javax.swing.GroupLayout layout = new javax.swing.GroupLayout(this);
        this.setLayout(layout);
        layout.setHorizontalGroup(
            layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addComponent(jSeparator)
            .addGroup(layout.createSequentialGroup()
                .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                    .addGroup(layout.createSequentialGroup()
                        .addGap(89, 89, 89)
                        .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.TRAILING)
                            .addComponent(removeButton)
                            .addGroup(layout.createSequentialGroup()
                                .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.TRAILING)
                                    .addComponent(peopleFedLabel, javax.swing.GroupLayout.PREFERRED_SIZE, 77, javax.swing.GroupLayout.PREFERRED_SIZE)
                                    .addComponent(wastageAvoidedLabel))
                                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.UNRELATED)
                                .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                                    .addComponent(wastageAvoidedValueLabel, javax.swing.GroupLayout.PREFERRED_SIZE, 115, javax.swing.GroupLayout.PREFERRED_SIZE)
                                    .addComponent(peopleFedSpinner, javax.swing.GroupLayout.PREFERRED_SIZE, 46, javax.swing.GroupLayout.PREFERRED_SIZE)))
                            .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING, false)
                                .addGroup(layout.createSequentialGroup()
                                    .addComponent(backButton)
                                    .addGap(490, 490, 490)
                                    .addComponent(confirmButton))
                                .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                                    .addComponent(jScrollPaneTblListItem, javax.swing.GroupLayout.Alignment.TRAILING, javax.swing.GroupLayout.PREFERRED_SIZE, 630, javax.swing.GroupLayout.PREFERRED_SIZE)
                                    .addComponent(jScrollPane, javax.swing.GroupLayout.PREFERRED_SIZE, 630, javax.swing.GroupLayout.PREFERRED_SIZE)))
                            .addGroup(layout.createSequentialGroup()
                                .addComponent(quantityLabel, javax.swing.GroupLayout.PREFERRED_SIZE, 77, javax.swing.GroupLayout.PREFERRED_SIZE)
                                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.UNRELATED)
                                .addComponent(quantitySpinner, javax.swing.GroupLayout.PREFERRED_SIZE, 66, javax.swing.GroupLayout.PREFERRED_SIZE)
                                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.UNRELATED)
                                .addComponent(addButton, javax.swing.GroupLayout.PREFERRED_SIZE, 69, javax.swing.GroupLayout.PREFERRED_SIZE))))
                    .addGroup(layout.createSequentialGroup()
                        .addGap(203, 203, 203)
                        .addComponent(headerLabel, javax.swing.GroupLayout.PREFERRED_SIZE, 478, javax.swing.GroupLayout.PREFERRED_SIZE)))
                .addGap(75, 75, 75))
        );
        layout.setVerticalGroup(
            layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGroup(layout.createSequentialGroup()
                .addGap(21, 21, 21)
                .addComponent(headerLabel)
                .addGap(23, 23, 23)
                .addComponent(jScrollPane, javax.swing.GroupLayout.PREFERRED_SIZE, 183, javax.swing.GroupLayout.PREFERRED_SIZE)
                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.UNRELATED)
                .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.BASELINE)
                    .addComponent(addButton)
                    .addComponent(quantityLabel)
                    .addComponent(quantitySpinner, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE))
                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.UNRELATED)
                .addComponent(jSeparator, javax.swing.GroupLayout.PREFERRED_SIZE, 10, javax.swing.GroupLayout.PREFERRED_SIZE)
                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                .addComponent(jScrollPaneTblListItem, javax.swing.GroupLayout.PREFERRED_SIZE, 154, javax.swing.GroupLayout.PREFERRED_SIZE)
                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.UNRELATED)
                .addComponent(removeButton)
                .addGap(12, 12, 12)
                .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.BASELINE)
                    .addComponent(peopleFedLabel)
                    .addComponent(peopleFedSpinner, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE))
                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.UNRELATED)
                .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                    .addComponent(wastageAvoidedValueLabel, javax.swing.GroupLayout.PREFERRED_SIZE, 14, javax.swing.GroupLayout.PREFERRED_SIZE)
                    .addComponent(wastageAvoidedLabel))
                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.UNRELATED)
                .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.BASELINE)
                    .addComponent(confirmButton)
                    .addComponent(backButton))
                .addGap(29, 29, 29))
        );
    }// </editor-fold>//GEN-END:initComponents

    
    
     private void populateItemTable()   {
        
        DefaultTableModel dtm  =  (DefaultTableModel)listItemTable.getModel();
        dtm.setRowCount(0);

        for( DistributedItems di  :  distributed.getDistributedItemList())   
        {
            Object row[]  =  new Object[2];
            row[0]  =  di.getDistributedRequestItem();
            row[1]  =  di.getQuantityDistributed();
            dtm.addRow(row);
        }
    }
     
     
    private void populateInventoryTable()   {
        
        DefaultTableModel dtm  =  (DefaultTableModel)inventoryTable.getModel();
        dtm.setRowCount(0);

        for( RequestItem ri  :  enterprise.getInventory().getRequestItemList())  
        {
            if( ri.getQuantity() > 0)   
            {
                Object row[]  =  new Object[2];
                row[0]  =  ri;
                row[1]  =  ri.getQuantity();
                
                dtm.addRow(row);
            }
        }

        //Enable sorting
        TableRowSorter<DefaultTableModel>sorter  =  new TableRowSorter<DefaultTableModel>(dtm);
        inventoryTable.setRowSorter(sorter);
        
    }

   

    private void backButtonActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_backButtonActionPerformed
        // TODO add your handling code here:

       
        DefaultTableModel dtm  =  (DefaultTableModel)listItemTable.getModel();
        
        for( int i = 0; i < dtm.getRowCount(); i++)   
        {
            RequestItem ri  =  (RequestItem) listItemTable.getValueAt(i, 0);
            
            if( ri != null)   
            {
                addBackToInventory(ri);
            }
        }
        dtm.setRowCount(0);

        // GO back
        
        userProcessContainer.remove(this);
        CardLayout layout  =  (CardLayout) userProcessContainer.getLayout();
        layout.previous(userProcessContainer);
        
    }//GEN-LAST:event_backButtonActionPerformed

    private void addButtonActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_addButtonActionPerformed
        
        int selectedRow  =  inventoryTable.getSelectedRow();
        
        if( selectedRow < 0)   
        {
            JOptionPane.showMessageDialog(null,"Please select an item to be added","Warning",JOptionPane.WARNING_MESSAGE);
            return;
        } 
        else 
        {
            RequestItem ri  =  (RequestItem)inventoryTable.getValueAt(selectedRow, 0);

            int quantity  =  (int)quantitySpinner.getValue();
            
            if( quantity > ri.getQuantity())   
            {
                JOptionPane.showMessageDialog(null,"Not enough quantity present in the inventory for the selected quantity","Warning",JOptionPane.WARNING_MESSAGE);
                return;
            }

            // Add item to table
            DefaultTableModel dtm  =  (DefaultTableModel)listItemTable.getModel();
            
            Object row[]  =  new Object[2];
            row[0]  =  ri;
            row[1]  =  ri.getQuantity();
            dtm.addRow(row);

            // Decrease Quantity from inventory and add to distributed list (if exists)
            
            boolean alreadyPresent  =  false;
            for( DistributedItems di  :  distributed.getDistributedItemList())   
            {
                RequestItem reqi  =  di.getDistributedRequestItem();
                if( reqi == ri)   
                {
                    int oldAvail  =  ri.getQuantity();
                    int newAvail  =  oldAvail - quantity;
                    ri.setQuantity(newAvail);

                    alreadyPresent  = true;
                    break; 
                }
            }

            // Decrease Quantity from inventory and add to distributed list (if doesn't exist)
            if( !alreadyPresent)  
            { 
                int oldAvail  =  ri.getQuantity();
                int newAvail  =  oldAvail - quantity;

                ri.setQuantity(newAvail);

                //RequestItem requestItem = new RequestItem(ri.getFoodName(), quantity, 0);
                DistributedItems di  =  distributed.addDistributedItems();
                di.setDistributedRequestItem(ri);
                di.setQuantityDistributed(quantity);
            }
            
            populateItemTable();
            populateInventoryTable();
            calculateWastageAvoided();
            
        }
    }//GEN-LAST:event_addButtonActionPerformed

    private void removeButtonActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_removeButtonActionPerformed

        int selectedRow  =  listItemTable.getSelectedRow();
        
        if( selectedRow < 0)  
        {
            JOptionPane.showMessageDialog(null,"Please select an item to be removed","Warning",JOptionPane.WARNING_MESSAGE);
            return;
        }

        RequestItem ri  =  (RequestItem)listItemTable.getValueAt(selectedRow, 0);
        addBackToInventory(ri);

        JOptionPane.showMessageDialog(null,"Selected food item removed and added back to inventory","Information",JOptionPane.INFORMATION_MESSAGE);

        populateInventoryTable();
        populateItemTable();
        calculateWastageAvoided();
        
    }//GEN-LAST:event_removeButtonActionPerformed

    private void confirmButtonActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_confirmButtonActionPerformed
        
        if( distributed.getDistributedItemList().isEmpty())   
        {
            JOptionPane.showMessageDialog(null,"No food items distributed","Warning",JOptionPane.INFORMATION_MESSAGE);
            return;
        }
        
        int peopleFed  =  (int) peopleFedSpinner.getValue();
        
        distributed.setPeopleFed(peopleFed);

        enterprise.addDistributedItem(distributed);

        JOptionPane.showMessageDialog(null,"Selected Items successfully distributed to people","Information",JOptionPane.INFORMATION_MESSAGE);

        populateInventoryTable();
        populateItemTable();

        DefaultTableModel dtm  =  (DefaultTableModel)listItemTable.getModel();
        dtm.setRowCount(0);

        distributed  =  new DistributedItemsDirectory();
        isDistributed  =  true;
        peopleFedSpinner.setValue(1);
        wastageAvoidedValueLabel.setText("0 pounds");
        //btnConfirm.setEnabled(false);
    }//GEN-LAST:event_confirmButtonActionPerformed

    private void calculateWastageAvoided()   { 
        

        double wastageAvoided  =  0;
        for( DistributedItems di  :  distributed.getDistributedItemList())   
        {
            RequestItem ri  =  di.getDistributedRequestItem();
            wastageAvoided  +=  Leftovers.getLeftoversQuantityPerServing(ri.getFoodName())*di.getQuantityDistributed();
        }
        wastageAvoidedValueLabel.setText(wastageAvoided +"pounds");
    }

    private void addBackToInventory(RequestItem ri)   
    {

        // Reset quantity in inventory
        int oldQty  =  ri.getQuantity();
        int currentAvail  =  0;

        DistributedItems toBeRemoved  =  null;

        for( DistributedItems di  :  distributed.getDistributedItemList())   
        {
            RequestItem reqi  =  di.getDistributedRequestItem();
            if( reqi  ==  ri) 
            {
                currentAvail  =  di.getQuantityDistributed();
                // Remove item from current distributed list
                toBeRemoved  =  di;
            }
        }

        distributed.removeDistributedItem(toBeRemoved);
        ri.setQuantity(oldQty+currentAvail);

    }

    // Variables declaration - do not modify//GEN-BEGIN:variables
    private javax.swing.JButton addButton;
    private javax.swing.JButton backButton;
    private javax.swing.JButton confirmButton;
    private javax.swing.JLabel headerLabel;
    private javax.swing.JTable inventoryTable;
    private javax.swing.JScrollPane jScrollPane;
    private javax.swing.JScrollPane jScrollPaneTblListItem;
    private javax.swing.JSeparator jSeparator;
    private javax.swing.JTable listItemTable;
    private javax.swing.JLabel peopleFedLabel;
    private javax.swing.JSpinner peopleFedSpinner;
    private javax.swing.JLabel quantityLabel;
    private javax.swing.JSpinner quantitySpinner;
    private javax.swing.JButton removeButton;
    private javax.swing.JLabel wastageAvoidedLabel;
    private javax.swing.JLabel wastageAvoidedValueLabel;
    // End of variables declaration//GEN-END:variables
}
