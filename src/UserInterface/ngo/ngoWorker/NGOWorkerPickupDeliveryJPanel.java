/*
 * To change this license header, choose License Headers in Project Properties.
 * To change this template file, choose Tools | Templates
 * and open the template in the editor.
 */
package userInterface.ngo.ngoWorker;

import Business.Enterprise.Enterprise;
import Business.Enterprise.NGOEnterprise;
import Business.UserAccount.UserAccount;
import Business.Util.Request.RequestItem;
import Business.Util.Request.RequestStatus;
import Business.WorkQueue.CollectionWorkRequest;
import Business.WorkQueue.WorkRequest;
import java.awt.CardLayout;
import javax.swing.JOptionPane;
import javax.swing.JPanel;
import javax.swing.table.DefaultTableModel;

/**
 *
 * @author siri chowdhary
 */
public class NGOWorkerPickupDeliveryJPanel extends javax.swing.JPanel {

    /**
     * Creates new form NGOWorkerPickupDeliveryJPanel
     */
    private JPanel userProcessContainer;
    private UserAccount account;
    private NGOEnterprise enterprise;
    

    public NGOWorkerPickupDeliveryJPanel ( JPanel userProcessContainer , UserAccount account , Enterprise enterprise)   {
        
        initComponents();
        
        this.userProcessContainer  =  userProcessContainer;
        this.account  =  account;
        this.enterprise  =  (NGOEnterprise) enterprise;
        
        populateTable();
        
    }

    /**
     * This method is called from within the constructor to initialize the form.
     * WARNING: Do NOT modify this code. The content of this method is always
     * regenerated by the Form Editor.
     */
    @SuppressWarnings("unchecked")
    // <editor-fold defaultstate="collapsed" desc="Generated Code">//GEN-BEGIN:initComponents
    private void initComponents() {

        jScrollPane = new javax.swing.JScrollPane();
        detailstable = new javax.swing.JTable();
        headerLabel = new javax.swing.JLabel();
        collectButton = new javax.swing.JButton();
        viewButton = new javax.swing.JButton();
        backButton = new javax.swing.JButton();

        setBackground(new java.awt.Color(204, 255, 204));

        detailstable.setModel(new javax.swing.table.DefaultTableModel(
            new Object [][] {

            },
            new String [] {
                "Sender", "Status"
            }
        ) {
            boolean[] canEdit = new boolean [] {
                false, false
            };

            public boolean isCellEditable(int rowIndex, int columnIndex) {
                return canEdit [columnIndex];
            }
        });
        jScrollPane.setViewportView(detailstable);

        headerLabel.setFont(new java.awt.Font("Tahoma", 1, 24)); // NOI18N
        headerLabel.setText("NGO Worker - Pickup Delivery");

        collectButton.setText("Collect");
        collectButton.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                collectButtonActionPerformed(evt);
            }
        });

        viewButton.setText("View");
        viewButton.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                viewButtonActionPerformed(evt);
            }
        });

        backButton.setText("<<Back");
        backButton.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                backButtonActionPerformed(evt);
            }
        });

        javax.swing.GroupLayout layout = new javax.swing.GroupLayout(this);
        this.setLayout(layout);
        layout.setHorizontalGroup(
            layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGroup(layout.createSequentialGroup()
                .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                    .addGroup(layout.createSequentialGroup()
                        .addGap(34, 34, 34)
                        .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.TRAILING, false)
                            .addGroup(layout.createSequentialGroup()
                                .addComponent(backButton)
                                .addGap(230, 230, 230)
                                .addComponent(collectButton)
                                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.UNRELATED)
                                .addComponent(viewButton))
                            .addComponent(jScrollPane, javax.swing.GroupLayout.PREFERRED_SIZE, 431, javax.swing.GroupLayout.PREFERRED_SIZE)))
                    .addGroup(layout.createSequentialGroup()
                        .addGap(85, 85, 85)
                        .addComponent(headerLabel)))
                .addGap(33, 33, 33))
        );
        layout.setVerticalGroup(
            layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGroup(layout.createSequentialGroup()
                .addGap(40, 40, 40)
                .addComponent(headerLabel)
                .addGap(48, 48, 48)
                .addComponent(jScrollPane, javax.swing.GroupLayout.PREFERRED_SIZE, 187, javax.swing.GroupLayout.PREFERRED_SIZE)
                .addGap(26, 26, 26)
                .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.BASELINE)
                    .addComponent(collectButton)
                    .addComponent(viewButton)
                    .addComponent(backButton))
                .addGap(61, 61, 61))
        );
    }// </editor-fold>//GEN-END:initComponents

    private void collectButtonActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_collectButtonActionPerformed
        // TODO add your handling code here:
        
        int selectedRow  =  detailstable.getSelectedRow();
        if( selectedRow < 0)   
        {
            JOptionPane.showMessageDialog(null,"Please select a request item to work","Warning",JOptionPane.WARNING_MESSAGE);
            return;
        } 
        else 
        {
            CollectionWorkRequest request  =  (CollectionWorkRequest)detailstable.getValueAt(selectedRow, 1);
            if( request.getStatus().equals(RequestStatus.getPickupStatusMessage(5)))   
            {

                request.setStatus(RequestStatus.getPickupStatusMessage(6));
                for( RequestItem ri  :  request.getRequestItems())  
                {
                    enterprise.getInventory().addRequestItem(ri);
                }

                JOptionPane.showMessageDialog( null , "Added to inventory", "Information", JOptionPane.INFORMATION_MESSAGE);
                populateTable();
            } 
            else 
            {
                JOptionPane.showMessageDialog(null,"Request already processed by you","Warning",JOptionPane.WARNING_MESSAGE);
                return;
            }
        }
    }//GEN-LAST:event_collectButtonActionPerformed

    private void viewButtonActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_viewButtonActionPerformed
        // TODO add your handling code here:
        
        int selectedRow  =  detailstable.getSelectedRow();
        
        if( selectedRow < 0) 
        {
            JOptionPane.showMessageDialog(null,"Please select a request item to work","Warning",JOptionPane.WARNING_MESSAGE);
            return;
        } 
        else 
        {
            CollectionWorkRequest request  =  (CollectionWorkRequest) detailstable.getValueAt(selectedRow, 1);

            NGOWorkerViewRequestJPanel nGOWorkerViewRequestJPanel  =  new NGOWorkerViewRequestJPanel ( userProcessContainer , request);
            userProcessContainer.add("NGOWorkerViewRequestJPanel", nGOWorkerViewRequestJPanel);
            
            CardLayout layout  =  (CardLayout) userProcessContainer.getLayout();
            layout.next(userProcessContainer);
            
        }
    }//GEN-LAST:event_viewButtonActionPerformed

    private void backButtonActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_backButtonActionPerformed
        // TODO add your handling code here:
        
        userProcessContainer.remove(this);
        CardLayout layout  =  (CardLayout) userProcessContainer.getLayout();
        layout.previous(userProcessContainer);
        
    }//GEN-LAST:event_backButtonActionPerformed


    // Variables declaration - do not modify//GEN-BEGIN:variables
    private javax.swing.JButton backButton;
    private javax.swing.JButton collectButton;
    private javax.swing.JTable detailstable;
    private javax.swing.JLabel headerLabel;
    private javax.swing.JScrollPane jScrollPane;
    private javax.swing.JButton viewButton;
    // End of variables declaration//GEN-END:variables

    private void populateTable()   {
        
        DefaultTableModel dtm  =  (DefaultTableModel) detailstable.getModel();
        dtm.setRowCount(0);
        
        for( WorkRequest workRequest  :  account.getWorkQueue().getWorkRequestList())   
        {
            CollectionWorkRequest cwr  =  (CollectionWorkRequest) workRequest;
            Object row[]  = new Object[2];
            row[0]  =  cwr.getRaisedByEvents();
            row[1]  =  cwr;
            dtm.addRow(row);
        }
    }
}
